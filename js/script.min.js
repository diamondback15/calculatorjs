'use strict';

var input = [];
var buttons = document.querySelectorAll('.button');
var isNumber = function isNumber(s) {
  return !isNaN(parseFloat(s));
};
var isOperator = function isOperator(s) {
  return '+-*/^#()'.includes(s);
};
var expElement = document.getElementById('input-string');
var resultElement = document.getElementById('input-value');

buttons.forEach(function (value, index) {
  buttons[index].addEventListener('click', buttonClick);
});

function buttonClick(e) {
  var value = e.target.dataset.value;

  switch (value) {
    case 'DEL':
      input.pop();
      updateExp(input);
      break;

    case 'AC':
      input = [];
      resultElement.innerHTML = 0;
      updateExp(input);
      break;

    case '=':
      result = value.length == 0 ? 0 : solvingEquation(input);
      resultElement.innerHTML = result;
      break;

    default:
      input.push(value);
      updateExp(input);
      break;
  }
}

function updateExp(input) {
  if (input.length == 0) {
    expElement.innerHTML = '&nbsp;';
  } else {
    expElement.textContent = input.join('');
  }
}

function keycodeMatch(element) {
  var mapKeys = {
    'Backspace': 'DEL',
    '.': '.',
    '1': '1',
    '2': '2',
    '3': '3',
    '4': '4',
    '5': '5',
    '6': '6',
    '7': '7',
    '8': '8',
    '9': '9',
    '0': '0',
    '+': '+',
    '-': '-',
    'x': '*',
    '*': '*',
    '/': '/',
    '(': '(',
    ')': ')',
    'Enter': '=',
    '=': '='
  };
  var value = mapKeys[element.key];
  if (value) {
    document.querySelector(".button[data-value='" + value + "']").click();
  }
}
window.addEventListener('keydown', keycodeMatch);

function solvingEquation(input) {
  var exp = input.reduce(function (acc, curr, index) {
    if (acc.length > 0 && !isOperator(curr) && !isOperator(acc[acc.length - 1])) {
      acc[acc.length - 1] += curr;
    } else {
      acc.push(curr);
    }
    return acc;
  }, []);

  console.log(exp);
  console.log(reduceParenthesis(exp));

  return solvingRpn(reduceParenthesis(exp));
}

function reduceParenthesis(exp) {
  var precedence = {
    '#': 1,
    '^': 2,
    '*': 3,
    '/': 3,
    '-': 4,
    '+': 4
  };
  var queue = [];
  var output = [];

  exp.forEach(function (value, index) {
    if (isNumber(value)) {
      output.push(value);
    } else if (value == '(') {
      queue.push(value);
    } else if (value == ')') {
      while (queue[queue.length - 1] && queue[queue.length - 1] != '(') {
        output.push(queue.pop());
      }
      queue.pop();
    } else if (isOperator(value)) {
      var prevvalue = exp[index - 1];
      if (value == '-' && !isNumber(prevvalue)) {
        value = '#';
      }
      queue.push(value);
    }
  });

  while (queue.length > 0) {
    output.push(queue.pop());
  }return output;
}

function solvingRpn(exp) {
  var operator = {
    '+': function _(b) {
      return function (a) {
        return a + b;
      };
    },
    '-': function _(b) {
      return function (a) {
        return a - b;
      };
    },
    '*': function _(b) {
      return function (a) {
        return a * b;
      };
    },
    '/': function _(b) {
      return function (a) {
        return a / b;
      };
    },
    '#': function _(a) {
      return -a;
    }
  };
  var queue = [];

  exp.forEach(function (value) {
    if (isNumber(value)) {
      queue.push(parseFloat(value));
    } else {
      var _result = operator[value];

      while (typeof _result == 'function') {
        _result = _result(queue.pop());
      }queue.push(_result);
    }
  });

  return queue[0];
}